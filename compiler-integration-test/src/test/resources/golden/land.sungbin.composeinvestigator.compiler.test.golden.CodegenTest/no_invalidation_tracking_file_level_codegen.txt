//
// Source
// ------------------------------------------

/*
 * Developed by Ji Sungbin 2024.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/jisungbin/ComposeInvestigator/blob/main/LICENSE
 */

@file:Suppress("TestFunctionName")
@file:NoInvestigation

package land.sungbin.composeinvestigator.compiler.test._source.codegen

import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import land.sungbin.composeinvestigator.runtime.NoInvestigation

@Suppress("unused")
@Composable
private fun Main() {
  var state by remember { mutableIntStateOf(0) }
  Button(onClick = { state++ }) {}
  Counter(count = state)
  Tv(title = "state", value = state)
}

@Composable
private fun Counter(count: Int) {
  Text(text = "$count")
}

@Suppress("SameParameterValue")
@Composable
private fun Tv(title: String, value: Any) {
  Text(text = "[$title] $value")
}

//
// Transformed IR
// ------------------------------------------

val ComposableCallstackTrackerImpl%TestKt: Stack<String> = Stack()
@Suppress(names = "unused")
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun Main(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  if (%changed != 0 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    var state by {
      val state%delegate = <block>{
        %composer.startReplaceableGroup(<>)
        val tmp0_group = %composer.cache(false) {
          mutableIntStateOf(0)
        }
        %composer.endReplaceableGroup()
        tmp0_group
      }
      get() {
        return state%delegate.getValue(null, ::state%delegate)
      }
      set(value: Int) {
        return state%delegate.setValue(null, ::state%delegate, value)
      }
    }
    try {
      ComposableCallstackTrackerImpl%TestKt.push("land.sungbin.composeinvestigator.compiler.test._source.codegen.Main")
      Button(<block>{
        %composer.startReplaceableGroup(<>)
        val tmp1_group = %composer.cache(false) {
          {
            <get-state>()++
          }
        }
        %composer.endReplaceableGroup()
        tmp1_group
      }, null, false, null, null, null, null, null, null, ComposableSingletons%TestKt.lambda-1, %composer, 0b00110000000000000000000000000110, 0b000111111110)
    } finally {
      ComposableCallstackTrackerImpl%TestKt.pop()
    }
    try {
      ComposableCallstackTrackerImpl%TestKt.push("land.sungbin.composeinvestigator.compiler.test._source.codegen.Main")
      Counter(<get-state>(), %composer, 0)
    } finally {
      ComposableCallstackTrackerImpl%TestKt.pop()
    }
    try {
      ComposableCallstackTrackerImpl%TestKt.push("land.sungbin.composeinvestigator.compiler.test._source.codegen.Main")
      Tv("state", <get-state>(), %composer, 0b0110)
    } finally {
      ComposableCallstackTrackerImpl%TestKt.pop()
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Main(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun Counter(count: Int, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  val %dirty = %changed
  if (%changed and 0b1110 == 0) {
    %dirty = %dirty or if (%composer.changed(count)) 0b0100 else 0b0010
  }
  if (%dirty and 0b1011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    try {
      ComposableCallstackTrackerImpl%TestKt.push("land.sungbin.composeinvestigator.compiler.test._source.codegen.Counter")
      Text("%count", null, <unsafe-coerce>(0L), <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, %composer, 0, 0, 0b00011111111111111110)
    } finally {
      ComposableCallstackTrackerImpl%TestKt.pop()
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Counter(count, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Suppress(names = "SameParameterValue")
@Composable
private fun Tv(title: String, value: Any, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  try {
    ComposableCallstackTrackerImpl%TestKt.push("land.sungbin.composeinvestigator.compiler.test._source.codegen.Tv")
    Text("[%title] %value", null, <unsafe-coerce>(0L), <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, %composer, 0, 0, 0b00011111111111111110)
  } finally {
    ComposableCallstackTrackerImpl%TestKt.pop()
  }
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Tv(title, value, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
internal object ComposableSingletons%TestKt {
  val lambda-1: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    if (%changed and 0b01010001 != 0b00010000 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      Unit
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
}
