//
// Source
// ------------------------------------------

/*
 * Developed by Ji Sungbin 2024.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/jisungbin/ComposeInvestigator/blob/main/LICENSE
 */

@file:Suppress("TestFunctionName")

package land.sungbin.composeinvestigator.compiler.test._source.codegen

import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue

@Suppress("unused")
@Composable
private fun Main() {
  var state by remember { mutableIntStateOf(0) }
  Button(onClick = { state++ }) {}
  Counter(count = state)
  Tv(title = "state", value = state)
}

@Composable
private fun Counter(count: Int) {
  Text(text = "$count")
}

@Suppress("SameParameterValue")
@Composable
private fun Tv(title: String, value: Any) {
  Text(text = "[$title] $value")
}

//
// Transformed IR
// ------------------------------------------

val ComposableInvalidationTrackTableImpl%TestKt: ComposableInvalidationTrackTable = ComposableInvalidationTrackTable()
@Suppress(names = "unused")
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun Main(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  if (%changed != 0 || !%composer.skipping) {
    val tmp0_affectFields = mutableListOf()
    val tmp1_Main%validationReason = ComposableInvalidationTrackTableImpl%TestKt.computeInvalidationReason("fun-Main(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", tmp0_affectFields)
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-Main(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("Main", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 22, 8), Processed(tmp1_Main%validationReason))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("Main", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 22, 8), Processed(tmp1_Main%validationReason))
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    var state by {
      val state%delegate = %composer.startReplaceableGroup(<>)
      val tmp0_group = %composer.cache(false) {
        mutableIntStateOf(0)
      }
      %composer.endReplaceableGroup()
      tmp0_group.registerStateObjectTracking(
        composer = %composer,
        composable = AffectedComposable("Main", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 22, 8),
        composableKeyName = "fun-Main(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt",
        stateName = "state"
      )
      get() {
        return state%delegate.getValue(null, ::state%delegate)
      }
      set(value: Int) {
        return state%delegate.setValue(null, ::state%delegate, value)
      }
    }
    Button(<block>{
      %composer.startReplaceableGroup(<>)
      val tmp1_group = %composer.cache(false) {
        {
          <get-state>()++
        }
      }
      %composer.endReplaceableGroup()
      tmp1_group
    }, null, false, null, null, null, null, null, null, ComposableSingletons%TestKt.lambda-1, %composer, 0b00110000000000000000000000000110, 0b000111111110)
    Counter(<get-state>(), %composer, 0)
    Tv("state", <get-state>(), %composer, 0b0110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-Main(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("Main", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 22, 8), Skipped)
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("Main", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 22, 8), Skipped)
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-Main(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("Main", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 22, 8), Processed(Invalidate))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("Main", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 22, 8), Processed(Invalidate))
    Main(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun Counter(count: Int, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  val %dirty = %changed
  if (%changed and 0b1110 == 0) {
    %dirty = %dirty or if (%composer.changed(count)) 0b0100 else 0b0010
  }
  if (%dirty and 0b1011 != 0b0010 || !%composer.skipping) {
    val tmp0_affectFields = mutableListOf()
    val tmp1_count%valueParam = ValueParameter("count", "kotlin.Int", count.toString(), count.hashCode(), Certain(true))
    tmp0_affectFields.add(tmp1_count%valueParam)
    val tmp2_Counter%validationReason = ComposableInvalidationTrackTableImpl%TestKt.computeInvalidationReason("fun-Counter(Int,Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", tmp0_affectFields)
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-Counter(Int,Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("Counter", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Processed(tmp2_Counter%validationReason))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("Counter", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Processed(tmp2_Counter%validationReason))
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    Text("%count", null, <unsafe-coerce>(0L), <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, %composer, 0, 0, 0b00011111111111111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-Counter(Int,Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("Counter", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Skipped)
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("Counter", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Skipped)
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-Counter(Int,Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("Counter", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Processed(Invalidate))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("Counter", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Processed(Invalidate))
    Counter(count, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Suppress(names = "SameParameterValue")
@Composable
private fun Tv(title: String, value: Any, %composer: Composer?, %changed: Int) {
  val tmp0_affectFields = mutableListOf()
  val tmp1_title%valueParam = ValueParameter("title", "kotlin.String", title.toString(), title.hashCode(), Certain(true))
  tmp0_affectFields.add(tmp1_title%valueParam)
  val tmp2_value%valueParam = ValueParameter("value", "kotlin.Any", value.toString(), value.hashCode(), Certain(false))
  tmp0_affectFields.add(tmp2_value%valueParam)
  val tmp3_Tv%validationReason = ComposableInvalidationTrackTableImpl%TestKt.computeInvalidationReason("fun-Tv(String,Any,Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", tmp0_affectFields)
  ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-Tv(String,Any,Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("Tv", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 36, 8), Processed(tmp3_Tv%validationReason))
  ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("Tv", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 36, 8), Processed(tmp3_Tv%validationReason))
  %composer = %composer.startRestartGroup(<>)
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  Text("[%title] %value", null, <unsafe-coerce>(0L), <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, %composer, 0, 0, 0b00011111111111111110)
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-Tv(String,Any,Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("Tv", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 36, 8), Processed(Invalidate))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("Tv", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 36, 8), Processed(Invalidate))
    Tv(title, value, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
internal object ComposableSingletons%TestKt {
  val lambda-1: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    if (%changed and 0b01010001 != 0b00010000 || !%composer.skipping) {
      val tmp0_affectFields = mutableListOf()
      val tmp1_<anonymous>%validationReason = ComposableInvalidationTrackTableImpl%TestKt.computeInvalidationReason("fun-RowScope.%anonymous%(Composer,Int)Unit/arg-2/call-composableLambdaInstance/val-lambda-1/class-ComposableSingletons%TestKt/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", tmp0_affectFields)
      ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-RowScope.%anonymous%(Composer,Int)Unit/arg-2/call-composableLambdaInstance/val-lambda-1/class-ComposableSingletons%TestKt/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("<anonymous>", "land.sungbin.composeinvestigator.compiler.test._source.codegen.ComposableSingletons%TestKt.lambda-1", "/Test.kt", 24, 32), Processed(tmp1_<anonymous>%validationReason))
      ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("<anonymous>", "land.sungbin.composeinvestigator.compiler.test._source.codegen.ComposableSingletons%TestKt.lambda-1", "/Test.kt", 24, 32), Processed(tmp1_<anonymous>%validationReason))
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      Unit
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-RowScope.%anonymous%(Composer,Int)Unit/arg-2/call-composableLambdaInstance/val-lambda-1/class-ComposableSingletons%TestKt/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", AffectedComposable("<anonymous>", "land.sungbin.composeinvestigator.compiler.test._source.codegen.ComposableSingletons%TestKt.lambda-1", "/Test.kt", 24, 32), Skipped)
      ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("<anonymous>", "land.sungbin.composeinvestigator.compiler.test._source.codegen.ComposableSingletons%TestKt.lambda-1", "/Test.kt", 24, 32), Skipped)
      %composer.skipToGroupEnd()
    }
  }
}
