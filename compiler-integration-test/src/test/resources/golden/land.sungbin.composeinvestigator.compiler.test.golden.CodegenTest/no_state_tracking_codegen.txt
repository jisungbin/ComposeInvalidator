//
// Source
// ------------------------------------------

/*
 * Developed by Ji Sungbin 2024.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/jisungbin/ComposeInvestigator/blob/main/LICENSE
 */

@file:Suppress("TestFunctionName", "UNUSED_VARIABLE", "unused")
@file:OptIn(ExperimentalTransitionApi::class)

package land.sungbin.composeinvestigator.compiler.test._source.codegen

import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.AnimationState
import androidx.compose.animation.core.ExperimentalTransitionApi
import androidx.compose.animation.core.MutableTransitionState
import androidx.compose.animation.core.VectorConverter
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.rememberTransition
import androidx.compose.runtime.Composable
import androidx.compose.runtime.State
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import land.sungbin.composeinvestigator.runtime.NoInvestigation

@Suppress("UnrememberedMutableState", "UnrememberedAnimatable")
@Composable
private fun UnrememberedStates() {
  @NoInvestigation val state = object : State<Int> {
    override val value: Int = 0
  }

  @NoInvestigation val mutableState = mutableStateOf(0)

  @NoInvestigation val animatable = Animatable(0f)

  @NoInvestigation val animationState = AnimationState(
    typeConverter = Float.VectorConverter,
    initialValue = 0f,
  )
}

@Suppress("UnrememberedMutableState", "UnrememberedAnimatable")
@Composable
private fun UnrememberedStatesDelegation() {
  @NoInvestigation val state by object : State<Int> {
    override val value: Int = 0
  }

  @NoInvestigation val mutableState by mutableStateOf(0)

  @NoInvestigation val animationState by AnimationState(
    typeConverter = Float.VectorConverter,
    initialValue = 0f,
  )
}

@Composable
private fun RememberedStates() {
  @NoInvestigation val state = remember {
    object : State<Int> {
      override val value: Int = 0
    }
  }

  @NoInvestigation val mutableState = remember { mutableStateOf(0) }

  @NoInvestigation val animatable = remember { Animatable(0f) }

  @NoInvestigation val animationState = remember {
    AnimationState(
      typeConverter = Float.VectorConverter,
      initialValue = 0f,
    )
  }

  @NoInvestigation val transitionAnimationState =
    rememberTransition(transitionState = MutableTransitionState(0f))
      .animateFloat(label = "unremembered") { prevState -> prevState * 2 }

  @NoInvestigation val infiniteTransition = rememberInfiniteTransition(label = "unremembered")
}

@Composable
private fun RememberedStatesDelegation() {
  @NoInvestigation val state by remember {
    object : State<Int> {
      override val value: Int = 0
    }
  }

  @NoInvestigation val mutableState by remember { mutableStateOf(0) }

  @NoInvestigation val animationState by remember {
    AnimationState(
      typeConverter = Float.VectorConverter,
      initialValue = 0f,
    )
  }

  @NoInvestigation val transitionAnimationState
    by rememberTransition(transitionState = MutableTransitionState(0f))
      .animateFloat(label = "unremembered") { prevState -> prevState * 2 }
}

//
// Transformed IR
// ------------------------------------------

val ComposableInvalidationTrackTableImpl%TestKt: ComposableInvalidationTrackTable = ComposableInvalidationTrackTable()
@Suppress(names = "UnrememberedMutableState", "UnrememberedAnimatable")
@Composable
private fun UnrememberedStates(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  if (%changed != 0 || !%composer.skipping) {
    val tmp0_affectFields = mutableListOf()
    val tmp1_UnrememberedStates%validationReason = ComposableInvalidationTrackTableImpl%TestKt.computeInvalidationReason("fun-UnrememberedStates(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", tmp0_affectFields)
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-UnrememberedStates(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("UnrememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Processed(tmp1_UnrememberedStates%validationReason))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("UnrememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Processed(tmp1_UnrememberedStates%validationReason))
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    val state = <block>{
      object : State<Int> {
        val value: Int = 0
      }
    }
    val mutableState = mutableStateOf(
      value = 0
    )
    val animatable = Animatable(
      initialValue = 0.0f
    )
    val animationState = AnimationState(
      typeConverter = Companion.VectorConverter,
      initialValue = 0.0f
    )
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-UnrememberedStates(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("UnrememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Skipped)
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("UnrememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Skipped)
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-UnrememberedStates(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("UnrememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Processed(Invalidate))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("UnrememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 30, 8), Processed(Invalidate))
    UnrememberedStates(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Suppress(names = "UnrememberedMutableState", "UnrememberedAnimatable")
@Composable
private fun UnrememberedStatesDelegation(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  if (%changed != 0 || !%composer.skipping) {
    val tmp0_affectFields = mutableListOf()
    val tmp1_UnrememberedStatesDelegation%validationReason = ComposableInvalidationTrackTableImpl%TestKt.computeInvalidationReason("fun-UnrememberedStatesDelegation(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", tmp0_affectFields)
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-UnrememberedStatesDelegation(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("UnrememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 47, 8), Processed(tmp1_UnrememberedStatesDelegation%validationReason))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("UnrememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 47, 8), Processed(tmp1_UnrememberedStatesDelegation%validationReason))
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    @NoInvestigation
    val state by {
      val state%delegate = <block>{
        object : State<Int> {
          val value: Int = 0
        }
      }
      get() {
        return state%delegate.getValue(null, ::state%delegate)
      }
    }
    @NoInvestigation
    val mutableState by {
      val mutableState%delegate = mutableStateOf(
        value = 0
      )
      get() {
        return mutableState%delegate.getValue(null, ::mutableState%delegate)
      }
    }
    @NoInvestigation
    val animationState by {
      val animationState%delegate = AnimationState(
        typeConverter = Companion.VectorConverter,
        initialValue = 0.0f
      )
      get() {
        return animationState%delegate.getValue(null, ::animationState%delegate)
      }
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-UnrememberedStatesDelegation(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("UnrememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 47, 8), Skipped)
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("UnrememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 47, 8), Skipped)
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-UnrememberedStatesDelegation(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("UnrememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 47, 8), Processed(Invalidate))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("UnrememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 47, 8), Processed(Invalidate))
    UnrememberedStatesDelegation(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
private fun RememberedStates(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  if (%changed != 0 || !%composer.skipping) {
    val tmp0_affectFields = mutableListOf()
    val tmp1_RememberedStates%validationReason = ComposableInvalidationTrackTableImpl%TestKt.computeInvalidationReason("fun-RememberedStates(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", tmp0_affectFields)
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-RememberedStates(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("RememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 61, 8), Processed(tmp1_RememberedStates%validationReason))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("RememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 61, 8), Processed(tmp1_RememberedStates%validationReason))
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    val state = <block>{
      %composer.startReplaceableGroup(<>)
      val tmp0_group = %composer.cache(false) {
        object : State<Int> {
          val value: Int = 0
        }
      }
      %composer.endReplaceableGroup()
      tmp0_group
    }
    val mutableState = <block>{
      %composer.startReplaceableGroup(<>)
      val tmp1_group = %composer.cache(false) {
        mutableStateOf(
          value = 0
        )
      }
      %composer.endReplaceableGroup()
      tmp1_group
    }
    val animatable = <block>{
      %composer.startReplaceableGroup(<>)
      val tmp2_group = %composer.cache(false) {
        Animatable(
          initialValue = 0.0f
        )
      }
      %composer.endReplaceableGroup()
      tmp2_group
    }
    val animationState = <block>{
      %composer.startReplaceableGroup(<>)
      val tmp3_group = %composer.cache(false) {
        AnimationState(
          typeConverter = Companion.VectorConverter,
          initialValue = 0.0f
        )
      }
      %composer.endReplaceableGroup()
      tmp3_group
    }
    val transitionAnimationState = rememberTransition(MutableTransitionState(0.0f), null, %composer, MutableTransitionState.%stable, 0b0010).animateFloat(null, "unremembered", { prevState: Float, %composer: Composer?, %changed: Int ->
      %composer.startReplaceableGroup(<>)
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      val tmp0 = prevState * 2
      if (isTraceInProgress()) {
        traceEventEnd()
      }
      %composer.endReplaceableGroup()
      tmp0
    }, %composer, 0b000110000000, 0b0001)
    val infiniteTransition = rememberInfiniteTransition("unremembered", %composer, 0b0110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-RememberedStates(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("RememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 61, 8), Skipped)
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("RememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 61, 8), Skipped)
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-RememberedStates(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("RememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 61, 8), Processed(Invalidate))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("RememberedStates", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 61, 8), Processed(Invalidate))
    RememberedStates(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
private fun RememberedStatesDelegation(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  if (%changed != 0 || !%composer.skipping) {
    val tmp0_affectFields = mutableListOf()
    val tmp1_RememberedStatesDelegation%validationReason = ComposableInvalidationTrackTableImpl%TestKt.computeInvalidationReason("fun-RememberedStatesDelegation(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", tmp0_affectFields)
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-RememberedStatesDelegation(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("RememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 87, 8), Processed(tmp1_RememberedStatesDelegation%validationReason))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("RememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 87, 8), Processed(tmp1_RememberedStatesDelegation%validationReason))
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    @NoInvestigation
    val state by {
      val state%delegate = <block>{
        %composer.startReplaceableGroup(<>)
        val tmp0_group = %composer.cache(false) {
          object : State<Int> {
            val value: Int = 0
          }
        }
        %composer.endReplaceableGroup()
        tmp0_group
      }
      get() {
        return state%delegate.getValue(null, ::state%delegate)
      }
    }
    @NoInvestigation
    val mutableState by {
      val mutableState%delegate = <block>{
        %composer.startReplaceableGroup(<>)
        val tmp1_group = %composer.cache(false) {
          mutableStateOf(
            value = 0
          )
        }
        %composer.endReplaceableGroup()
        tmp1_group
      }
      get() {
        return mutableState%delegate.getValue(null, ::mutableState%delegate)
      }
    }
    @NoInvestigation
    val animationState by {
      val animationState%delegate = <block>{
        %composer.startReplaceableGroup(<>)
        val tmp2_group = %composer.cache(false) {
          AnimationState(
            typeConverter = Companion.VectorConverter,
            initialValue = 0.0f
          )
        }
        %composer.endReplaceableGroup()
        tmp2_group
      }
      get() {
        return animationState%delegate.getValue(null, ::animationState%delegate)
      }
    }
    @NoInvestigation
    val transitionAnimationState by {
      val transitionAnimationState%delegate = rememberTransition(MutableTransitionState(0.0f), null, %composer, MutableTransitionState.%stable, 0b0010).animateFloat(null, "unremembered", { prevState: Float, %composer: Composer?, %changed: Int ->
        %composer.startReplaceableGroup(<>)
        if (isTraceInProgress()) {
          traceEventStart(<>, %changed, -1, <>)
        }
        val tmp0 = prevState * 2
        if (isTraceInProgress()) {
          traceEventEnd()
        }
        %composer.endReplaceableGroup()
        tmp0
      }, %composer, 0b000110000000, 0b0001)
      get() {
        return transitionAnimationState%delegate.getValue(null, ::transitionAnimationState%delegate)
      }
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-RememberedStatesDelegation(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("RememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 87, 8), Skipped)
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("RememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 87, 8), Skipped)
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    ComposableInvalidationTrackTableImpl%TestKt.callListeners("fun-RememberedStatesDelegation(Composer,Int)Unit/pkg-land.sungbin.composeinvestigator.compiler.test._source.codegen/file-Test.kt", emptyList(), AffectedComposable("RememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 87, 8), Processed(Invalidate))
    ComposeInvestigatorConfig.invalidationLogger(emptyList(), AffectedComposable("RememberedStatesDelegation", "land.sungbin.composeinvestigator.compiler.test._source.codegen", "/Test.kt", 87, 8), Processed(Invalidate))
    RememberedStatesDelegation(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
