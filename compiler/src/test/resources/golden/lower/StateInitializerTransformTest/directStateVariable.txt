//
// Source
// ------------------------------------------

/*
 * Developed by Ji Sungbin 2024.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/jisungbin/ComposeInvestigator/blob/main/LICENSE
 */

@file:Suppress("unused", "UnusedVariable")

package land.sungbin.composeinvestigator.compiler._source.lower.stateInitializer

import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember

@Composable fun directStateVariable() {
  val state = remember { mutableStateOf(Unit) }
  val state2 = remember { run { mutableStateOf(Unit) } }
}


//
// Transformed IR
// ------------------------------------------

val ComposableInvalidationTraceTableImpl%DirectStateVariableKt: ComposableInvalidationTraceTable = ComposableInvalidationTraceTable()
@Composable
fun directStateVariable(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  if (%changed != 0 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    val state = ComposableInvalidationTraceTableImpl%DirectStateVariableKt.registerStateObject(<block>{
      %composer.startReplaceGroup(<>)
      val tmp0_group = %composer.cache(false) {
        mutableStateOf(
          value = Unit
        )
      }
      %composer.endReplaceGroup()
      tmp0_group
    }, "state")
    val state2 = ComposableInvalidationTraceTableImpl%DirectStateVariableKt.registerStateObject(<block>{
      %composer.startReplaceGroup(<>)
      val tmp1_group = %composer.cache(false) {
        run {
          mutableStateOf(
            value = Unit
          )
        }
      }
      %composer.endReplaceGroup()
      tmp1_group
    }, "state2")
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    directStateVariable(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
