//
// IR
// ------------------------------------------

FILE fqName:land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip fileName:noInvestigationComposable.kt
  annotations:
    Suppress(names = ["unused"])
  PROPERTY name:ComposableInvalidationTraceTableImpl$NoInvestigationComposableKt visibility:private modality:FINAL [val]
    FIELD name:ComposableInvalidationTraceTableImpl$NoInvestigationComposableKt type:land.sungbin.composeinvestigator.runtime.ComposableInvalidationTraceTable visibility:private [final,static]
      EXPRESSION_BODY
        CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in land.sungbin.composeinvestigator.runtime.ComposableInvalidationTraceTable' type=land.sungbin.composeinvestigator.runtime.ComposableInvalidationTraceTable origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-ComposableInvalidationTraceTableImpl$NoInvestigationComposableKt> visibility:private modality:FINAL <> () returnType:land.sungbin.composeinvestigator.runtime.ComposableInvalidationTraceTable
      correspondingProperty: PROPERTY name:ComposableInvalidationTraceTableImpl$NoInvestigationComposableKt visibility:private modality:FINAL [val]
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun <get-ComposableInvalidationTraceTableImpl$NoInvestigationComposableKt> (): land.sungbin.composeinvestigator.runtime.ComposableInvalidationTraceTable declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip'
          GET_FIELD 'FIELD name:ComposableInvalidationTraceTableImpl$NoInvestigationComposableKt type:land.sungbin.composeinvestigator.runtime.ComposableInvalidationTraceTable visibility:private [final,static] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip' type=land.sungbin.composeinvestigator.runtime.ComposableInvalidationTraceTable origin=null
  FUN name:use visibility:private modality:FINAL <> (any:kotlin.Any) returnType:kotlin.Int
    VALUE_PARAMETER name:any index:0 type:kotlin.Any
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='private final fun use (any: kotlin.Any): kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip'
        CALL 'public open fun hashCode (): kotlin.Int declared in kotlin.Any' type=kotlin.Int origin=null
          $this: GET_VAR 'any: kotlin.Any declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.use' type=kotlin.Any origin=null
  FUN name:noInvestigationBlockComposable visibility:private modality:FINAL <> (any:kotlin.Any, any2:kotlin.Any, $composer:androidx.compose.runtime.Composer?, $changed:kotlin.Int) returnType:kotlin.Unit
    annotations:
      Composable
      NoInvestigation
    VALUE_PARAMETER name:any index:0 type:kotlin.Any
    VALUE_PARAMETER name:any2 index:1 type:kotlin.Any
    VALUE_PARAMETER name:$composer index:2 type:androidx.compose.runtime.Composer? [assignable]
    VALUE_PARAMETER name:$changed index:3 type:kotlin.Int
    BLOCK_BODY
      SET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Unit origin=null
        CALL 'public abstract fun startRestartGroup (key: kotlin.Int): androidx.compose.runtime.Composer declared in androidx.compose.runtime.Composer' type=androidx.compose.runtime.Composer origin=null
          $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=androidx.compose.runtime.Composer? origin=null
          key: CONST Int type=kotlin.Int value=615838550
      VAR name:$dirty type:kotlin.Int [val]
        GET_VAR '$changed: kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Int origin=null
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$changed: kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=6
            arg1: CONST Int type=kotlin.Int value=0
          then: SET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Unit origin=null
            CALL 'public final fun or (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Int origin=null
              other: WHEN type=kotlin.Int origin=IF
                BRANCH
                  if: CALL 'public open fun changedInstance (value: kotlin.Any?): kotlin.Boolean declared in androidx.compose.runtime.Composer' type=kotlin.Boolean origin=null
                    $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=androidx.compose.runtime.Composer? origin=null
                    value: GET_VAR 'any: kotlin.Any declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Any origin=null
                  then: CONST Int type=kotlin.Int value=4
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Int type=kotlin.Int value=2
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$changed: kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=48
            arg1: CONST Int type=kotlin.Int value=0
          then: SET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Unit origin=null
            CALL 'public final fun or (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Int origin=null
              other: WHEN type=kotlin.Int origin=IF
                BRANCH
                  if: CALL 'public open fun changedInstance (value: kotlin.Any?): kotlin.Boolean declared in androidx.compose.runtime.Composer' type=kotlin.Boolean origin=null
                    $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=androidx.compose.runtime.Composer? origin=null
                    value: GET_VAR 'any2: kotlin.Any declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Any origin=null
                  then: CONST Int type=kotlin.Int value=32
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Int type=kotlin.Int value=16
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: WHEN type=kotlin.Boolean origin=OROR
            BRANCH
              if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                  arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
                    $this: GET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Int origin=null
                    other: CONST Int type=kotlin.Int value=19
                  arg1: CONST Int type=kotlin.Int value=18
              then: CONST Boolean type=kotlin.Boolean value=true
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                $this: CALL 'public abstract fun <get-skipping> (): kotlin.Boolean declared in androidx.compose.runtime.Composer' type=kotlin.Boolean origin=null
                  $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=androidx.compose.runtime.Composer? origin=null
          then: BLOCK type=kotlin.Unit origin=null
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime' type=kotlin.Boolean origin=null
                then: CALL 'public final fun traceEventStart (key: kotlin.Int, dirty1: kotlin.Int, dirty2: kotlin.Int, info: kotlin.String): kotlin.Unit declared in androidx.compose.runtime' type=kotlin.Unit origin=null
                  key: CONST Int type=kotlin.Int value=615838550
                  dirty1: GET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Int origin=null
                  dirty2: CONST Int type=kotlin.Int value=-1
                  info: CONST String type=kotlin.String value="land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable (noInvestigationComposable.kt:17)"
            TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
              CALL 'private final fun use (any: kotlin.Any): kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip' type=kotlin.Int origin=null
                any: GET_VAR 'any: kotlin.Any declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Any origin=null
            TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
              CALL 'private final fun use (any: kotlin.Any): kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip' type=kotlin.Int origin=null
                any: GET_VAR 'any2: kotlin.Any declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Any origin=null
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime' type=kotlin.Boolean origin=null
                then: CALL 'public final fun traceEventEnd (): kotlin.Unit declared in androidx.compose.runtime' type=kotlin.Unit origin=null
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: CALL 'public abstract fun skipToGroupEnd (): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
            $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=androidx.compose.runtime.Composer? origin=null
      BLOCK type=kotlin.Unit origin=null
        BLOCK type=kotlin.Unit origin=SAFE_CALL
          VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:androidx.compose.runtime.ScopeUpdateScope? [val]
            CALL 'public abstract fun endRestartGroup (): androidx.compose.runtime.ScopeUpdateScope? declared in androidx.compose.runtime.Composer' type=androidx.compose.runtime.ScopeUpdateScope? origin=null
              $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=androidx.compose.runtime.Composer? origin=null
          WHEN type=kotlin.Unit origin=IF
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                arg0: GET_VAR 'val tmp0_safe_receiver: androidx.compose.runtime.ScopeUpdateScope? [val] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=androidx.compose.runtime.ScopeUpdateScope? origin=null
                arg1: CONST Null type=kotlin.Any? value=null
              then: CONST Null type=kotlin.Any? value=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public abstract fun updateScope (block: kotlin.Function2<androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit>): kotlin.Unit declared in androidx.compose.runtime.ScopeUpdateScope' type=kotlin.Unit origin=null
                $this: GET_VAR 'val tmp0_safe_receiver: androidx.compose.runtime.ScopeUpdateScope? [val] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=androidx.compose.runtime.ScopeUpdateScope? origin=null
                block: FUN_EXPR type=kotlin.Function2<androidx.compose.runtime.Composer?, kotlin.Int, kotlin.Unit> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($composer:androidx.compose.runtime.Composer?, $force:kotlin.Int) returnType:kotlin.Unit
                    VALUE_PARAMETER name:$composer index:0 type:androidx.compose.runtime.Composer?
                    VALUE_PARAMETER name:$force index:1 type:kotlin.Int
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='local final fun <anonymous> ($composer: androidx.compose.runtime.Composer?, $force: kotlin.Int): kotlin.Unit declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable'
                        CALL 'private final fun noInvestigationBlockComposable (any: kotlin.Any, any2: kotlin.Any, $composer: androidx.compose.runtime.Composer?, $changed: kotlin.Int): kotlin.Unit declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip' type=kotlin.Unit origin=null
                          any: GET_VAR 'any: kotlin.Any declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Any origin=null
                          any2: GET_VAR 'any2: kotlin.Any declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Any origin=null
                          $composer: GET_VAR '$composer: androidx.compose.runtime.Composer? declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable.<anonymous>' type=androidx.compose.runtime.Composer? origin=null
                          $changed: CALL 'internal final fun updateChangedFlags (flags: kotlin.Int): kotlin.Int declared in androidx.compose.runtime' type=kotlin.Int origin=null
                            flags: CALL 'public final fun or (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
                              $this: GET_VAR '$changed: kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationBlockComposable' type=kotlin.Int origin=null
                              other: CONST Int type=kotlin.Int value=1
  FUN name:noInvestigationExpressionComposable visibility:private modality:FINAL <> (any:kotlin.Any, any2:kotlin.Any, $composer:androidx.compose.runtime.Composer?, $changed:kotlin.Int) returnType:kotlin.Int
    annotations:
      Composable
      NoInvestigation
    VALUE_PARAMETER name:any index:0 type:kotlin.Any
    VALUE_PARAMETER name:any2 index:1 type:kotlin.Any
    VALUE_PARAMETER name:$composer index:2 type:androidx.compose.runtime.Composer? [assignable]
    VALUE_PARAMETER name:$changed index:3 type:kotlin.Int
    BLOCK_BODY
      CALL 'public abstract fun startReplaceGroup (key: kotlin.Int): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
        $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationExpressionComposable' type=androidx.compose.runtime.Composer? origin=null
        key: CONST Int type=kotlin.Int value=472355990
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime' type=kotlin.Boolean origin=null
          then: CALL 'public final fun traceEventStart (key: kotlin.Int, dirty1: kotlin.Int, dirty2: kotlin.Int, info: kotlin.String): kotlin.Unit declared in androidx.compose.runtime' type=kotlin.Unit origin=null
            key: CONST Int type=kotlin.Int value=472355990
            dirty1: GET_VAR '$changed: kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationExpressionComposable' type=kotlin.Int origin=null
            dirty2: CONST Int type=kotlin.Int value=-1
            info: CONST String type=kotlin.String value="land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationExpressionComposable (noInvestigationComposable.kt:24)"
      VAR IR_TEMPORARY_VARIABLE name:tmp0 type:kotlin.Int [val]
        CALL 'public final fun plus (other: kotlin.Int): kotlin.Int [operator] declared in kotlin.Int' type=kotlin.Int origin=PLUS
          $this: CALL 'private final fun use (any: kotlin.Any): kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip' type=kotlin.Int origin=null
            any: GET_VAR 'any: kotlin.Any declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationExpressionComposable' type=kotlin.Any origin=null
          other: CALL 'private final fun use (any: kotlin.Any): kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip' type=kotlin.Int origin=null
            any: GET_VAR 'any2: kotlin.Any declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationExpressionComposable' type=kotlin.Any origin=null
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime' type=kotlin.Boolean origin=null
          then: CALL 'public final fun traceEventEnd (): kotlin.Unit declared in androidx.compose.runtime' type=kotlin.Unit origin=null
      CALL 'public abstract fun endReplaceGroup (): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
        $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationExpressionComposable' type=androidx.compose.runtime.Composer? origin=null
      RETURN type=kotlin.Int from='private final fun noInvestigationExpressionComposable (any: kotlin.Any, any2: kotlin.Any, $composer: androidx.compose.runtime.Composer?, $changed: kotlin.Int): kotlin.Int declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip'
        GET_VAR 'val tmp0: kotlin.Int [val] declared in land.sungbin.composeinvestigator.compiler._source.lower.invalidationProcessAndSkip.noInvestigationExpressionComposable' type=kotlin.Int origin=null

//
// SOURCE
// ------------------------------------------

val ComposableInvalidationTraceTableImpl%NoInvestigationComposableKt: ComposableInvalidationTraceTable = ComposableInvalidationTraceTable()
private fun use(any: Any): Int {
  return any.hashCode()
}
@Composable
@NoInvestigation
private fun noInvestigationBlockComposable(any: Any, any2: Any, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changedInstance(any)) 0b0100 else 0b0010
  }
  if (%changed and 0b00110000 == 0) {
    %dirty = %dirty or if (%composer.changedInstance(any2)) 0b00100000 else 0b00010000
  }
  if (%dirty and 0b00010011 != 0b00010010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    use(any)
    use(any2)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    noInvestigationBlockComposable(any, any2, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
@NoInvestigation
private fun noInvestigationExpressionComposable(any: Any, any2: Any, %composer: Composer?, %changed: Int): Int {
  %composer.startReplaceGroup(<>)
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  val tmp0 = use(any) + use(any2)
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  %composer.endReplaceGroup()
  return tmp0
}
